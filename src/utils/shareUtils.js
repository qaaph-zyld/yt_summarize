/**
 * Share Utilities
 * 
 * This module contains functions for sharing and exporting YouTube video summaries and analysis results.
 */

/**
 * Generate a shareable URL for a video analysis
 * @param {string} videoId - YouTube video ID
 * @param {string} tab - Active tab (summary, transcript, keypoints, topics)
 * @param {string} summaryType - Summary type (brief, detailed, executive)
 * @returns {string} - Shareable URL
 */
export function generateShareableUrl(videoId, tab = 'summary', summaryType = 'detailed') {
  const baseUrl = window.location.origin + window.location.pathname;
  return `${baseUrl}?v=${videoId}&tab=${tab}&type=${summaryType}`;
}

/**
 * Share via Web Share API if available
 * @param {Object} data - Share data
 * @param {string} data.title - Share title
 * @param {string} data.text - Share text
 * @param {string} data.url - Share URL
 * @returns {Promise<boolean>} - True if shared successfully, false if not supported
 */
export async function shareViaWebShare(data) {
  if (navigator.share) {
    try {
      await navigator.share(data);
      return true;
    } catch (error) {
      console.error('Error sharing:', error);
      return false;
    }
  }
  return false;
}

/**
 * Copy text to clipboard
 * @param {string} text - Text to copy
 * @returns {Promise<boolean>} - True if copied successfully
 */
export async function copyToClipboard(text) {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy text:', error);
    
    // Fallback for older browsers
    try {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      const success = document.execCommand('copy');
      document.body.removeChild(textArea);
      return success;
    } catch (fallbackError) {
      console.error('Fallback copy failed:', fallbackError);
      return false;
    }
  }
}

/**
 * Generate a summary text for sharing
 * @param {Object} result - Video analysis result
 * @param {string} summaryType - Summary type (brief, detailed, executive)
 * @returns {string} - Formatted summary text
 */
export function generateSummaryText(result, summaryType = 'detailed') {
  if (!result || !result.metadata || !result.summaries) {
    return '';
  }
  
  const { metadata, summaries } = result;
  const summary = summaries[summaryType] || '';
  
  return `${metadata.title} - Summary\n\n${summary}\n\nWatch: https://youtu.be/${result.videoId}`;
}

/**
 * Generate a full analysis text for sharing or exporting
 * @param {Object} result - Video analysis result
 * @returns {string} - Formatted analysis text
 */
export function generateFullAnalysisText(result) {
  if (!result || !result.metadata) {
    return '';
  }
  
  const { metadata, summaries, keyPoints, transcript } = result;
  
  let text = `# ${metadata.title}\n\n`;
  text += `Channel: ${metadata.channel}\n`;
  text += `Published: ${metadata.publishedDate}\n\n`;
  
  text += `## Brief Summary\n${summaries.brief}\n\n`;
  text += `## Detailed Summary\n${summaries.detailed}\n\n`;
  
  text += `## Key Points\n`;
  keyPoints.forEach((point, index) => {
    text += `${index + 1}. ${point}\n`;
  });
  text += '\n';
  
  text += `## Full Transcript\n${transcript.full}\n\n`;
  
  text += `Watch: https://youtu.be/${result.videoId}\n`;
  text += `Generated by YouTube Video Summarizer on ${new Date().toLocaleDateString()}`;
  
  return text;
}

/**
 * Download text as a file
 * @param {string} text - Text content
 * @param {string} filename - File name
 * @param {string} fileType - File type (txt, md, html)
 */
export function downloadAsFile(text, filename, fileType = 'txt') {
  const element = document.createElement('a');
  let content = text;
  let mimeType = 'text/plain';
  
  // Format content based on file type
  if (fileType === 'html') {
    content = `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>${filename}</title>
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
    h1, h2 { color: #333; }
    .metadata { color: #666; margin-bottom: 20px; }
    .summary { background: #f9f9f9; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
    .key-points { margin-bottom: 20px; }
    .transcript { font-size: 0.9em; line-height: 1.8; }
    .footer { margin-top: 30px; font-size: 0.8em; color: #666; border-top: 1px solid #eee; padding-top: 10px; }
  </style>
</head>
<body>
  ${text.replace(/\n/g, '<br>').replace(/^# (.*)/gm, '<h1>$1</h1>').replace(/^## (.*)/gm, '<h2>$1</h2>')}
</body>
</html>`;
    mimeType = 'text/html';
  } else if (fileType === 'md') {
    mimeType = 'text/markdown';
  }
  
  const file = new Blob([content], { type: mimeType });
  element.href = URL.createObjectURL(file);
  element.download = `${filename}.${fileType}`;
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
}

/**
 * Share to social media platforms
 * @param {string} platform - Social media platform (twitter, facebook, linkedin)
 * @param {Object} data - Share data
 * @param {string} data.title - Share title
 * @param {string} data.text - Share text
 * @param {string} data.url - Share URL
 */
export function shareToSocialMedia(platform, data) {
  const { title, text, url } = data;
  let shareUrl = '';
  
  switch (platform.toLowerCase()) {
    case 'twitter':
    case 'x':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
      break;
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
      break;
    case 'linkedin':
      shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}&title=${encodeURIComponent(title)}`;
      break;
    case 'email':
      shareUrl = `mailto:?subject=${encodeURIComponent(title)}&body=${encodeURIComponent(text + '\n\n' + url)}`;
      break;
    default:
      console.error(`Unsupported platform: ${platform}`);
      return;
  }
  
  // Open in a new window
  window.open(shareUrl, '_blank', 'width=600,height=400');
}
